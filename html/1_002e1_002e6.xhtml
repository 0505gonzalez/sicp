<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Structure and Interpretation of Computer Programs, 2e: 1.1.6</title>

<meta name="description" content="Structure and Interpretation of Computer Programs, 2e: 1.1.6" />
<meta name="keywords" content="Structure and Interpretation of Computer Programs, 2e: 1.1.6" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="Generator" content="texi2any" />
<meta charset="utf-8" />
<link href="index.xhtml#Top" rel="start" title="Top" />
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index" />
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents" />
<link href="1_002e1.xhtml#g_t1_002e1" rel="prev" title="1.1" />
<link href="1_002e1_002e7.xhtml#g_t1_002e1_002e7" rel="next" title="1.1.7" />
<link href="1_002e1_002e5.xhtml#g_t1_002e1_002e5" rel="prev" title="1.1.5" />

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script src="js/jquery.min.js" type="text/javascript"></script>
<script src="js/footnotes.js" type="text/javascript"></script>
<script src="js/browsertest.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e1_002e6"></a>
<nav class="header">
<p>
Next: <a href="1_002e1_002e7.xhtml#g_t1_002e1_002e7" accesskey="n" rel="next">1.1.7</a>, Previous: <a href="1_002e1_002e5.xhtml#g_t1_002e1_002e5" accesskey="p" rel="prev">1.1.5</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr />

<a id="Conditional-Expressions-and-Predicates"></a>
<h4 class="subsection"><span class="secnum">1.1.6</span><span class="sectitle">Conditional Expressions and Predicates</span></h4>

<p>The expressive power of the class of procedures that we can define at this
point is very limited, because we have no way to make tests and to perform
different operations depending on the result of a test.  For instance, we
cannot define a procedure that computes the absolute value of a number by
testing whether the number is positive, negative, or zero and taking different
actions in the different cases according to the rule

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow>
    <mo>|</mo>
    <mrow class="MJX-TeXAtom-ORD">
      <mi>x</mi>
    </mrow>
    <mo>|</mo>
  </mrow>
  <mspace width="thickmathspace"/>
  <mo>=</mo>
  <mspace width="thickmathspace"/>
  <mrow>
    <mo>{</mo>
    <mtable columnalign="right left left" rowspacing="4pt" columnspacing="1em">
      <mtr>
        <mtd>
          <mi>x</mi>
        </mtd>
        <mtd>
          <mspace width="thickmathspace"/>
          <mtext>if</mtext>
        </mtd>
        <mtd>
          <mi>x</mi>
          <mo>&gt;<!-- > --></mo>
          <mn>0</mn>
          <mo>,</mo>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mspace width="thickmathspace"/>
          <mtext>if</mtext>
        </mtd>
        <mtd>
          <mi>x</mi>
          <mo>=</mo>
          <mn>0</mn>
          <mo>,</mo>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mo>−<!-- − --></mo>
          <mi>x</mi>
        </mtd>
        <mtd>
          <mspace width="thickmathspace"/>
          <mtext>if</mtext>
        </mtd>
        <mtd>
          <mi>x</mi>
          <mo>&lt;<!-- < --></mo>
          <mn>0.</mn>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</math>

This construct is called a <a id="index-case-analysis"></a>
<em>case analysis</em>, and there is a special form
in Lisp for notating such a case analysis.  It is called <code>cond</code> (which
stands for “conditional”), and it is used as follows:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">&gt;</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> x</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">&lt;</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> x</span><span class="clo">))))</span></pre></div>

<p>The general form of a conditional expression is
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">p</span><span class="pun">₁</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">e</span><span class="pun">₁</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">p</span><span class="pun">₂</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">e</span><span class="pun">₂</span></var><span class="pln">⟩</span><span class="clo">)</span><span class="pln">
      </span><span class="roman"><span class="pun">…</span></span><span class="pln">
      </span><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">p</span><span class="pun">ₙ</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">e</span><span class="pun">ₙ</span></var><span class="pln">⟩</span><span class="clo">))</span></pre></div>

<p>consisting of the symbol <code>cond</code> followed by parenthesized pairs of
expressions
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">⟨</span><var><span class="pln">p</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">e</span></var><span class="pln">⟩</span><span class="clo">)</span></pre></div>

<p>called <a id="index-clauses"></a>
<em>clauses</em>. The first expression in each pair is a
<a id="index-predicate"></a>
<em>predicate</em>—that is, an expression whose value is interpreted as
either true or false.<a class="footnote_link" id="DOCF17" href="#FOOT17"><sup>17</sup></a>
</p>
<p>Conditional expressions are evaluated as follows.  The predicate <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">⟨</mo>
    <msub>
      <mi>p</mi>
      <mn>1</mn>
    </msub>
    <mo stretchy="false">⟩</mo>
  </mrow>
</math> is
evaluated first.  If its value is false, then <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">⟨</mo>
    <msub>
      <mi>p</mi>
      <mn>2</mn>
    </msub>
    <mo stretchy="false">⟩</mo>
  </mrow>
</math> is evaluated.  If
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">⟨</mo>
    <msub>
      <mi>p</mi>
      <mn>2</mn>
    </msub>
    <mo stretchy="false">⟩</mo>
  </mrow>
</math>’s value is also false, then <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">⟨</mo>
    <msub>
      <mi>p</mi>
      <mn>3</mn>
    </msub>
    <mo stretchy="false">⟩</mo>
  </mrow>
</math> is evaluated.  This process
continues until a predicate is found whose value is true, in which case the
interpreter returns the value of the corresponding <a id="index-consequent-expression"></a>
<em>consequent expression</em> 
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">⟨</mo>
    <mi>e</mi>
    <mo stretchy="false">⟩</mo>
  </mrow>
</math> of the clause as the value of the conditional expression.
If none of the <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">⟨</mo>
    <mi>p</mi>
    <mo stretchy="false">⟩</mo>
  </mrow>
</math>’s is found to be true, the value of the <code>cond</code> is
undefined.
</p>
<p>The word <a id="index-predicate-1"></a>
<em>predicate</em> is used for procedures that return true or false,
as well as for expressions that evaluate to true or false.  The absolute-value
procedure <code>abs</code> makes use of the primitive predicates <code>&gt;</code>, <code>&lt;</code>,
and <code>=</code>.<a class="footnote_link" id="DOCF18" href="#FOOT18"><sup>18</sup></a> These take two numbers as arguments and test whether the first
number is, respectively, greater than, less than, or equal to the second
number, returning true or false accordingly.
</p>
<p>Another way to write the absolute-value procedure is
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">&lt;</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> x</span><span class="clo">))</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> x</span><span class="clo">)))</span></pre></div>

<p>which could be expressed in English as “If <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>x</mi>
</math> is less than zero return 
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo>−<!-- − --></mo>
    <mi>x</mi>
  </mrow>
</math>; otherwise return <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>x</mi>
</math>.”  <code>Else</code> is a special symbol that can be
used in place of the <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">⟨</mo>
    <mi>p</mi>
    <mo stretchy="false">⟩</mo>
  </mrow>
</math> in the final clause of a <code>cond</code>.  This
causes the <code>cond</code> to return as its value the value of the corresponding
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">⟨</mo>
    <mi>e</mi>
    <mo stretchy="false">⟩</mo>
  </mrow>
</math> whenever all previous clauses have been bypassed.  In fact, any
expression that always evaluates to a true value could be used as the <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">⟨</mo>
    <mi>p</mi>
    <mo stretchy="false">⟩</mo>
  </mrow>
</math>
here.
</p>
<p>Here is yet another way to write the absolute-value procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">abs x</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> x</span><span class="clo">)</span><span class="pln">
      x</span><span class="clo">))</span></pre></div>

<p>This uses the special form <code>if</code>, a restricted type of conditional that can
be used when there are precisely two cases in the case analysis.  The general
form of an <code>if</code> expression is
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">if</span><span class="pln"> ⟨</span><var><span class="pln">predicate</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">consequent</span></var><span class="pln">⟩ ⟨</span><var><span class="pln">alternative</span></var><span class="pln">⟩</span><span class="clo">)</span></pre></div>

<p>To evaluate an <code>if</code> expression, the interpreter starts by evaluating the
<code>⟨</code><var>predicate</var><code>⟩</code> part of the expression.  If the <code>⟨</code><var>predicate</var><code>⟩</code> evaluates
to a true value, the interpreter then evaluates the <code>⟨</code><var>consequent</var><code>⟩</code> and
returns its value.  Otherwise it evaluates the <code>⟨</code><var>alternative</var><code>⟩</code> and returns
its value.<a class="footnote_link" id="DOCF19" href="#FOOT19"><sup>19</sup></a>
</p>
<p>In addition to primitive predicates such as <code>&lt;</code>, <code>=</code>, and <code>&gt;</code>,
there are logical composition operations, which enable us to construct compound
predicates.  The three most frequently used are these:
</p>
<ul>
<li> <code>(and ⟨<var>e₁</var>⟩ <span class="roman">…</span> ⟨<var>eₙ</var>⟩)</code>

<p>The interpreter evaluates the expressions <code>⟨</code><var>e</var><code>⟩</code> one at a time, in
left-to-right order.  If any <code>⟨</code><var>e</var><code>⟩</code> evaluates to false, the value of the
<code>and</code> expression is false, and the rest of the <code>⟨</code><var>e</var><code>⟩</code>’s are not
evaluated.  If all <code>⟨</code><var>e</var><code>⟩</code>’s evaluate to true values, the value of the
<code>and</code> expression is the value of the last one.
</p>
</li><li> <code>(or ⟨<var>e₁</var>⟩ <span class="roman">…</span> ⟨<var>eₙ</var>⟩)</code>

<p>The interpreter evaluates the expressions <code>⟨</code><var>e</var><code>⟩</code> one at a time, in
left-to-right order.  If any <code>⟨</code><var>e</var><code>⟩</code> evaluates to a true value, that value is
returned as the value of the <code>or</code> expression, and the rest of the
<code>⟨</code><var>e</var><code>⟩</code>’s are not evaluated.  If all <code>⟨</code><var>e</var><code>⟩</code>’s evaluate to false, the value
of the <code>or</code> expression is false.
</p>
</li><li> <code>(not ⟨<var>e</var>⟩)</code>

<p>The value of a <code>not</code> expression is true when the expression <code>⟨</code><var>e</var><code>⟩</code>
evaluates to false, and false otherwise.
</p>
</li></ul>

<p>Notice that <code>and</code> and <code>or</code> are special forms, not procedures, because
the subexpressions are not necessarily all evaluated.  <code>Not</code> is an
ordinary procedure.
</p>
<p>As an example of how these are used, the condition that a number <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>x</mi>
</math> be in
the range <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mn>5</mn>
  <mo>&lt;</mo>
  <mi>x</mi>
  <mo>&lt;</mo>
  <mn>10</mn>
</math> may be expressed as
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">and</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> x </span><span class="lit">5</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> x </span><span class="lit">10</span><span class="clo">))</span></pre></div>

<p>As another example, we can define a predicate to test whether one number is
greater than or equal to another as 
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;=</span><span class="pln"> x y</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="kwd">or</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> x y</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> x y</span><span class="clo">)))</span></pre></div>

<p>or alternatively as 
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;=</span><span class="pln"> x y</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pln">not </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> x y</span><span class="clo">)))</span></pre></div>

<blockquote>
<p><strong><a id="Exercise-1_002e1"></a>Exercise 1.1:</strong> Below is a sequence of expressions.
What is the result printed by the interpreter in response to each expression?
Assume that the sequence is to be evaluated in the order in which it is
presented.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="lit">10</span><span class="pln">
</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">5</span><span class="pln"> </span><span class="lit">3</span><span class="pln"> </span><span class="lit">4</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">9</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pun">/</span><span class="pln"> </span><span class="lit">6</span><span class="pln"> </span><span class="lit">2</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="lit">6</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> a </span><span class="lit">3</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> b </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">1</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a b </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="pun">=</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="kwd">and</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> b a</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> b </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">)))</span><span class="pln">
    b
    a</span><span class="clo">)</span><span class="pln">
</span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> a </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> </span><span class="lit">6</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> b </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">6</span><span class="pln"> </span><span class="lit">7</span><span class="pln"> a</span><span class="clo">))</span><span class="pln">
      </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> </span><span class="lit">25</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> b a</span><span class="clo">)</span><span class="pln"> b a</span><span class="clo">))</span><span class="pln">
</span><span class="opn">(</span><span class="pun">*</span><span class="pln"> </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">&gt;</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln"> a</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">((</span><span class="pun">&lt;</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln"> b</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> </span><span class="lit">-1</span><span class="clo">))</span><span class="pln">
   </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="lit">1</span><span class="clo">))</span></pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e2"></a>Exercise 1.2:</strong> Translate the following expression
into prefix form:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow class="MJX-TeXAtom-ORD">
    <mfrac>
      <mrow>
        <mn>5</mn>
        <mo>+</mo>
        <mn>4</mn>
        <mo>+</mo>
        <mo stretchy="false">(</mo>
        <mn>2</mn>
        <mo>−<!-- − --></mo>
        <mo stretchy="false">(</mo>
        <mn>3</mn>
        <mo>−<!-- − --></mo>
        <mo stretchy="false">(</mo>
        <mn>6</mn>
        <mo>+</mo>
        <mfrac>
          <mn>4</mn>
          <mn>5</mn>
        </mfrac>
        <mo stretchy="false">)</mo>
        <mo stretchy="false">)</mo>
        <mo stretchy="false">)</mo>
      </mrow>
      <mrow>
        <mn>3</mn>
        <mo stretchy="false">(</mo>
        <mn>6</mn>
        <mo>−<!-- − --></mo>
        <mn>2</mn>
        <mo stretchy="false">)</mo>
        <mo stretchy="false">(</mo>
        <mn>2</mn>
        <mo>−<!-- − --></mo>
        <mn>7</mn>
        <mo stretchy="false">)</mo>
      </mrow>
    </mfrac>
    <mo>.</mo>
  </mrow>
</math>

</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e3"></a>Exercise 1.3:</strong> Define a procedure that takes three
numbers as arguments and returns the sum of the squares of the two larger
numbers.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e4"></a>Exercise 1.4:</strong> Observe that our model of
evaluation allows for combinations whose operators are compound expressions.
Use this observation to describe the behavior of the following procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">a-plus-abs-b a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">((</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&gt;</span><span class="pln"> b </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">-</span><span class="clo">)</span><span class="pln"> a b</span><span class="clo">))</span></pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e5"></a>Exercise 1.5:</strong> Ben Bitdiddle has invented a test
to determine whether the interpreter he is faced with is using
applicative-order evaluation or normal-order evaluation.  He defines the
following two procedures:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">p</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">p</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">test x y</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> x </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
      </span><span class="lit">0</span><span class="pln"> 
      y</span><span class="clo">))</span></pre></div>

<p>Then he evaluates the expression
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">test </span><span class="lit">0</span><span class="pln"> </span><span class="opn">(</span><span class="pln">p</span><span class="clo">))</span></pre></div>

<p>What behavior will Ben observe with an interpreter that uses applicative-order
evaluation?  What behavior will he observe with an interpreter that uses
normal-order evaluation?  Explain your answer.  (Assume that the evaluation
rule for the special form <code>if</code> is the same whether the interpreter is
using normal or applicative order: The predicate expression is evaluated first,
and the result determines whether to evaluate the consequent or the alternative
expression.)
</p></blockquote>

<a id="Sec_002e1_002e1_002e7"></a><div class="footnote">
<hr />

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT17"><p><a class="footnote_backlink" href="#DOCF17"><sup>17</sup></a>
“Interpreted as either true or false” means
this: In Scheme, there are two distinguished values that are denoted by the
constants <code>#t</code> and <code>#f</code>.  When the interpreter checks a predicate’s
value, it interprets <code>#f</code> as false.  Any other value is treated as true.
(Thus, providing <code>#t</code> is logically unnecessary, but it is convenient.)  In
this book we will use names <code>true</code> and <code>false</code>, which are associated
with the values <code>#t</code> and <code>#f</code> respectively.</p>
</div>
<div id="FOOT18"><p><a class="footnote_backlink" href="#DOCF18"><sup>18</sup></a>
<code>Abs</code> also uses the “minus” operator <code>-</code>,
which, when used with a single operand, as in <code>(- x)</code>, indicates
negation.</p>
</div>
<div id="FOOT19"><p><a class="footnote_backlink" href="#DOCF19"><sup>19</sup></a>
A minor difference between <code>if</code> and <code>cond</code> is
that the <code>⟨</code><var>e</var><code>⟩</code> part of each <code>cond</code> clause may be a sequence of
expressions.  If the corresponding <code>⟨</code><var>p</var><code>⟩</code> is found to be true, the
expressions <code>⟨</code><var>e</var><code>⟩</code> are evaluated in sequence and the value of the final
expression in the sequence is returned as the value of the <code>cond</code>.  In an
<code>if</code> expression, however, the <code>⟨</code><var>consequent</var><code>⟩</code> and <code>⟨</code><var>alternative</var><code>⟩</code>
must be single expressions.</p>
</div>
</div>
<hr />
<nav class="header">
<p>
Next: <a href="1_002e1_002e7.xhtml#g_t1_002e1_002e7" accesskey="n" rel="next">1.1.7</a>, Previous: <a href="1_002e1_002e5.xhtml#g_t1_002e1_002e5" accesskey="p" rel="prev">1.1.5</a>, Up: <a href="1_002e1.xhtml#g_t1_002e1" accesskey="u" rel="prev">1.1</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>