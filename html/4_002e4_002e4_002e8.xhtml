<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Structure and Interpretation of Computer Programs, 2e: 4.4.4.8</title>

<meta name="description" content="Structure and Interpretation of Computer Programs, 2e: 4.4.4.8" />
<meta name="keywords" content="Structure and Interpretation of Computer Programs, 2e: 4.4.4.8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="Generator" content="texi2any" />
<meta charset="utf-8" />
<link href="index.xhtml#Top" rel="start" title="Top" />
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index" />
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents" />
<link href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" rel="prev" title="4.4.4" />
<link href="Chapter-5.xhtml#Chapter-5" rel="next" title="Chapter 5" />
<link href="4_002e4_002e4_002e7.xhtml#g_t4_002e4_002e4_002e7" rel="prev" title="4.4.4.7" />

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script src="js/jquery.min.js" type="text/javascript"></script>
<script src="js/footnotes.js" type="text/javascript"></script>
<script src="js/browsertest.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t4_002e4_002e4_002e8"></a>
<nav class="header">
<p>
Next: <a href="Chapter-5.xhtml#Chapter-5" accesskey="n" rel="next">Chapter 5</a>, Previous: <a href="4_002e4_002e4_002e7.xhtml#g_t4_002e4_002e4_002e7" accesskey="p" rel="prev">4.4.4.7</a>, Up: <a href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" accesskey="u" rel="prev">4.4.4</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr />

<a id="Frames-and-Bindings"></a>
<h5 class="subsubsection"><span class="secnum">4.4.4.8</span><span class="sectitle">Frames and Bindings</span></h5>

<p>Frames are represented as lists of bindings, which are variable-value pairs:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">make-binding variable value</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cons</span><span class="pln"> variable value</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">binding-variable binding</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">car</span><span class="pln"> binding</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">binding-value binding</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cdr</span><span class="pln"> binding</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">binding-in-frame variable frame</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">assoc variable frame</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">extend variable value frame</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cons</span><span class="pln"> </span><span class="opn">(</span><span class="pln">make-binding variable value</span><span class="clo">)</span><span class="pln"> frame</span><span class="clo">))</span></pre></div>

<blockquote>
<p><strong><a id="Exercise-4_002e71"></a>Exercise 4.71:</strong> Louis Reasoner wonders why the
<code>simple-query</code> and <code>disjoin</code> procedures (<a href="4_002e4_002e4_002e2.xhtml#g_t4_002e4_002e4_002e2">4.4.4.2</a>) are
implemented using explicit <code>delay</code> operations, rather than being defined
as follows:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">simple-query 
         query-pattern frame-stream</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">stream-flatmap
   </span><span class="opn">(</span><span class="kwd">lambda</span><span class="pln"> </span><span class="opn">(</span><span class="pln">frame</span><span class="clo">)</span><span class="pln">
     </span><span class="opn">(</span><span class="pln">stream-append
      </span><span class="opn">(</span><span class="pln">find-assertions query-pattern frame</span><span class="clo">)</span><span class="pln">
      </span><span class="opn">(</span><span class="pln">apply-rules query-pattern frame</span><span class="clo">)))</span><span class="pln">
   frame-stream</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">disjoin disjuncts frame-stream</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">empty-disjunction? disjuncts</span><span class="clo">)</span><span class="pln">
      the-empty-stream
      </span><span class="opn">(</span><span class="pln">interleave
       </span><span class="opn">(</span><span class="pln">qeval </span><span class="opn">(</span><span class="pln">first-disjunct disjuncts</span><span class="clo">)</span><span class="pln">
              frame-stream</span><span class="clo">)</span><span class="pln">
       </span><span class="opn">(</span><span class="pln">disjoin </span><span class="opn">(</span><span class="pln">rest-disjuncts disjuncts</span><span class="clo">)</span><span class="pln">
                frame-stream</span><span class="clo">))))</span></pre></div>

<p>Can you give examples of queries where these simpler definitions would lead to
undesirable behavior?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e72"></a>Exercise 4.72:</strong> Why do <code>disjoin</code> and
<code>stream-flatmap</code> interleave the streams rather than simply append them?
Give examples that illustrate why interleaving works better.  (Hint: Why did we
use <code>interleave</code> in <a href="3_002e5_002e3.xhtml#g_t3_002e5_002e3">3.5.3</a>?)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e73"></a>Exercise 4.73:</strong> Why does <code>flatten-stream</code>
use <code>delay</code> explicitly?  What would be wrong with defining it as follows:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">flatten-stream stream</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pln">stream-null? stream</span><span class="clo">)</span><span class="pln">
      the-empty-stream
      </span><span class="opn">(</span><span class="pln">interleave </span><span class="opn">(</span><span class="pln">stream-car stream</span><span class="clo">)</span><span class="pln">
                  </span><span class="opn">(</span><span class="pln">flatten-stream 
                   </span><span class="opn">(</span><span class="pln">stream-cdr stream</span><span class="clo">)))))</span></pre></div>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e74"></a>Exercise 4.74:</strong> Alyssa P. Hacker proposes to use
a simpler version of <code>stream-flatmap</code> in <code>negate</code>, <code>lisp-value</code>,
and <code>find-assertions</code>.  She observes that the procedure that is mapped
over the frame stream in these cases always produces either the empty stream or
a singleton stream, so no interleaving is needed when combining these streams.
</p>
<ol>
<li> Fill in the missing expressions in Alyssa’s program.

<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">simple-stream-flatmap proc s</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">simple-flatten </span><span class="opn">(</span><span class="pln">stream-map proc s</span><span class="clo">)))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">simple-flatten stream</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">stream-map ⟨</span><span class="pun">??</span><span class="pln">⟩
              </span><span class="opn">(</span><span class="pln">stream-filter ⟨</span><span class="pun">??</span><span class="pln">⟩ 
                             stream</span><span class="clo">)))</span></pre></div>

</li><li> Does the query system’s behavior change if we change it in this way?

</li></ol>
</blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e75"></a>Exercise 4.75:</strong> Implement for the query language
a new special form called <code>unique</code>.  <code>Unique</code> should succeed if there
is precisely one item in the data base satisfying a specified query.  For
example,
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">unique </span><span class="opn">(</span><span class="pln">job </span><span class="pun">?</span><span class="pln">x </span><span class="opn">(</span><span class="pln">computer wizard</span><span class="clo">)))</span></pre></div>

<p>should print the one-item stream
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">unique </span><span class="opn">(</span><span class="pln">job </span><span class="opn">(</span><span class="pln">Bitdiddle Ben</span><span class="clo">)</span><span class="pln">
             </span><span class="opn">(</span><span class="pln">computer wizard</span><span class="clo">)))</span></pre></div>

<p>since Ben is the only computer wizard, and
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">unique </span><span class="opn">(</span><span class="pln">job </span><span class="pun">?</span><span class="pln">x </span><span class="opn">(</span><span class="pln">computer programmer</span><span class="clo">)))</span></pre></div>

<p>should print the empty stream, since there is more than one computer
programmer.  Moreover,
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">and</span><span class="pln"> </span><span class="opn">(</span><span class="pln">job </span><span class="pun">?</span><span class="pln">x </span><span class="pun">?</span><span class="pln">j</span><span class="clo">)</span><span class="pln"> 
     </span><span class="opn">(</span><span class="pln">unique </span><span class="opn">(</span><span class="pln">job </span><span class="pun">?</span><span class="pln">anyone </span><span class="pun">?</span><span class="pln">j</span><span class="clo">)))</span></pre></div>

<p>should list all the jobs that are filled by only one person, and the people who
fill them.
</p>
<p>There are two parts to implementing <code>unique</code>.  The first is to write a
procedure that handles this special form, and the second is to make
<code>qeval</code> dispatch to that procedure.  The second part is trivial, since
<code>qeval</code> does its dispatching in a data-directed way.  If your procedure is
called <code>uniquely-asserted</code>, all you need to do is
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">put </span><span class="lit">'unique</span><span class="pln"> </span><span class="lit">'qeval</span><span class="pln"> uniquely-asserted</span><span class="clo">)</span></pre></div>

<p>and <code>qeval</code> will dispatch to this procedure for every query whose
<code>type</code> (<code>car</code>) is the symbol <code>unique</code>.
</p>
<p>The real problem is to write the procedure <code>uniquely-asserted</code>.  This
should take as input the <code>contents</code> (<code>cdr</code>) of the <code>unique</code>
query, together with a stream of frames.  For each frame in the stream, it
should use <code>qeval</code> to find the stream of all extensions to the frame that
satisfy the given query.  Any stream that does not have exactly one item in it
should be eliminated.  The remaining streams should be passed back to be
accumulated into one big stream that is the result of the <code>unique</code> query.
This is similar to the implementation of the <code>not</code> special form.
</p>
<p>Test your implementation by forming a query that lists all people who supervise
precisely one person.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e76"></a>Exercise 4.76:</strong> Our implementation of <code>and</code>
as a series combination of queries (<a href="4_002e4_002e2.xhtml#Figure-4_002e5">Figure 4.5</a>) is elegant, but it is
inefficient because in processing the second query of the <code>and</code> we must
scan the data base for each frame produced by the first query.  If the data
base has <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> elements, and a typical query produces a number of output frames
proportional to <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> (say <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>n</mi>
    <mspace width="thinmathspace"/>
    <mrow class="MJX-TeXAtom-ORD">
      <mo>/</mo>
    </mrow>
    <mspace width="thinmathspace"/>
    <mi>k</mi>
  </mrow>
</math>), then scanning the data base for each
frame produced by the first query will require <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <msup>
      <mi>n</mi>
      <mn>2</mn>
    </msup>
    <mrow class="MJX-TeXAtom-ORD">
      <mo>/</mo>
    </mrow>
    <mspace width="thinmathspace"/>
    <mi>k</mi>
  </mrow>
</math> calls to the
pattern matcher.  Another approach would be to process the two clauses of the
<code>and</code> separately, then look for all pairs of output frames that are
compatible.  If each query produces <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>n</mi>
    <mspace width="thinmathspace"/>
    <mrow class="MJX-TeXAtom-ORD">
      <mo>/</mo>
    </mrow>
    <mspace width="thinmathspace"/>
    <mi>k</mi>
  </mrow>
</math> output frames, then this means
that we must perform <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <msup>
      <mi>n</mi>
      <mn>2</mn>
    </msup>
    <mrow class="MJX-TeXAtom-ORD">
      <mo>/</mo>
    </mrow>
    <mspace width="thinmathspace"/>
    <msup>
      <mi>k</mi>
      <mn>2</mn>
    </msup>
  </mrow>
</math> compatibility checks—a factor of <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>k</mi>
</math>
fewer than the number of matches required in our current method.
</p>
<p>Devise an implementation of <code>and</code> that uses this strategy.  You must
implement a procedure that takes two frames as inputs, checks whether the
bindings in the frames are compatible, and, if so, produces a frame that merges
the two sets of bindings.  This operation is similar to unification.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e77"></a>Exercise 4.77:</strong> In <a href="4_002e4_002e3.xhtml#g_t4_002e4_002e3">4.4.3</a> we saw
that <code>not</code> and <code>lisp-value</code> can cause the query language to give
“wrong” answers if these filtering operations are applied to frames in which
variables are unbound.  Devise a way to fix this shortcoming.  One idea is to
perform the filtering in a “delayed” manner by appending to the frame a
“promise” to filter that is fulfilled only when enough variables have been
bound to make the operation possible.  We could wait to perform filtering until
all other operations have been performed.  However, for efficiency’s sake, we
would like to perform filtering as soon as possible so as to cut down on the
number of intermediate frames generated.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e78"></a>Exercise 4.78:</strong> Redesign the query language as a
nondeterministic program to be implemented using the evaluator of 
<a href="4_002e3.xhtml#g_t4_002e3">4.3</a>, rather than as a stream process.  In this approach, each query will
produce a single answer (rather than the stream of all answers) and the user
can type <code>try-again</code> to see more answers.  You should find that much of
the mechanism we built in this section is subsumed by nondeterministic search
and backtracking.  You will probably also find, however, that your new query
language has subtle differences in behavior from the one implemented here.  Can
you find examples that illustrate this difference?
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-4_002e79"></a>Exercise 4.79:</strong> When we implemented the Lisp
evaluator in <a href="4_002e1.xhtml#g_t4_002e1">4.1</a>, we saw how to use local environments to avoid
name conflicts between the parameters of procedures.  For example, in
evaluating
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square x</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> x x</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">sum-of-squares x y</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square x</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">square y</span><span class="clo">)))</span><span class="pln">

</span><span class="opn">(</span><span class="pln">sum-of-squares </span><span class="lit">3</span><span class="pln"> </span><span class="lit">4</span><span class="clo">)</span></pre></div>

<p>there is no confusion between the <code>x</code> in <code>square</code> and the <code>x</code> in
<code>sum-of-squares</code>, because we evaluate the body of each procedure in an
environment that is specially constructed to contain bindings for the local
variables.  In the query system, we used a different strategy to avoid name
conflicts in applying rules.  Each time we apply a rule we rename the variables
with new names that are guaranteed to be unique.  The analogous strategy for
the Lisp evaluator would be to do away with local environments and simply
rename the variables in the body of a procedure each time we apply the
procedure.
</p>
<p>Implement for the query language a rule-application method that uses
environments rather than renaming.  See if you can build on your environment
structure to create constructs in the query language for dealing with large
systems, such as the rule analog of block-structured procedures.  Can you
relate any of this to the problem of making deductions in a context (e.g., “If
I supposed that <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>P</mi>
</math> were true, then I would be able to deduce <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>A</mi>
</math> and
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>B</mi>
</math>.”) as a method of problem solving?  (This problem is open-ended.  A good
answer is probably worth a Ph.D.)
</p></blockquote>

<hr />
<nav class="header">
<p>
Next: <a href="Chapter-5.xhtml#Chapter-5" accesskey="n" rel="next">Chapter 5</a>, Previous: <a href="4_002e4_002e4_002e7.xhtml#g_t4_002e4_002e4_002e7" accesskey="p" rel="prev">4.4.4.7</a>, Up: <a href="4_002e4_002e4.xhtml#g_t4_002e4_002e4" accesskey="u" rel="prev">4.4.4</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>