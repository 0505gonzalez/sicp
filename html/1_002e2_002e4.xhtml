<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Structure and Interpretation of Computer Programs, 2e: 1.2.4</title>

<meta name="description" content="Structure and Interpretation of Computer Programs, 2e: 1.2.4" />
<meta name="keywords" content="Structure and Interpretation of Computer Programs, 2e: 1.2.4" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="Generator" content="texi2any" />
<meta charset="utf-8" />
<link href="index.xhtml#Top" rel="start" title="Top" />
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index" />
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents" />
<link href="1_002e2.xhtml#g_t1_002e2" rel="prev" title="1.2" />
<link href="1_002e2_002e5.xhtml#g_t1_002e2_002e5" rel="next" title="1.2.5" />
<link href="1_002e2_002e3.xhtml#g_t1_002e2_002e3" rel="prev" title="1.2.3" />

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script src="js/jquery.min.js" type="text/javascript"></script>
<script src="js/footnotes.js" type="text/javascript"></script>
<script src="js/browsertest.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e2_002e4"></a>
<nav class="header">
<p>
Next: <a href="1_002e2_002e5.xhtml#g_t1_002e2_002e5" accesskey="n" rel="next">1.2.5</a>, Previous: <a href="1_002e2_002e3.xhtml#g_t1_002e2_002e3" accesskey="p" rel="prev">1.2.3</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr />

<a id="Exponentiation"></a>
<h4 class="subsection"><span class="secnum">1.2.4</span><span class="sectitle">Exponentiation</span></h4>

<p>Consider the problem of computing the exponential of a given number.  We would
like a procedure that takes as arguments a base <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>b</mi>
</math> and a positive integer
exponent <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> and computes <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup>
    <mi>b</mi>
    <mi>n</mi>
  </msup>
</math>.  One way to do this is via the
recursive definition

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mtable columnalign="left" rowspacing="4pt" columnspacing="1em">
    <mtr>
      <mtd>
        <msup>
          <mi>b</mi>
          <mi>n</mi>
        </msup>
        <mspace width="thinmathspace"/>
        <mo>=</mo>
        <mspace width="thinmathspace"/>
        <mi>b</mi>
        <mo>⋅<!-- ⋅ --></mo>
        <msup>
          <mi>b</mi>
          <mrow class="MJX-TeXAtom-ORD">
            <mi>n</mi>
            <mo>−<!-- − --></mo>
            <mn>1</mn>
          </mrow>
        </msup>
        <mo>,</mo>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <msup>
          <mi>b</mi>
          <mn>0</mn>
        </msup>
        <mspace width="thinmathspace"/>
        <mo>=</mo>
        <mspace width="thinmathspace"/>
        <mn>1</mn>
        <mo>,</mo>
      </mtd>
    </mtr>
  </mtable>
</math>

which translates readily into the procedure
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expt b n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> n </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
      </span><span class="lit">1</span><span class="pln"> 
      </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b </span><span class="opn">(</span><span class="pln">expt b </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">)))))</span></pre></div>

<p>This is a linear recursive process, which requires <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi mathvariant="normal">Θ<!-- Θ --></mi>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> steps and
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi mathvariant="normal">Θ<!-- Θ --></mi>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> space.  Just as with factorial, we can readily formulate an
equivalent linear iteration:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expt b n</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pln">expt-iter b n </span><span class="lit">1</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">expt-iter b counter product</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> counter </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
      product
      </span><span class="opn">(</span><span class="pln">expt-iter b
                 </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> counter </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
                 </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b product</span><span class="clo">))))</span></pre></div>

<p>This version requires <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi mathvariant="normal">Θ<!-- Θ --></mi>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> steps and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi mathvariant="normal">Θ<!-- Θ --></mi>
    <mo stretchy="false">(</mo>
    <mn>1</mn>
    <mo stretchy="false">)</mo>
  </mrow>
</math> space.
</p>
<p>We can compute exponentials in fewer steps by using successive squaring.  For
instance, rather than computing <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup>
    <mi>b</mi>
    <mn>8</mn>
  </msup>
</math> as

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>b</mi>
    <mo>⋅<!-- ⋅ --></mo>
    <mo stretchy="false">(</mo>
    <mi>b</mi>
    <mo>⋅<!-- ⋅ --></mo>
    <mo stretchy="false">(</mo>
    <mi>b</mi>
  </mrow>
  <mo>⋅<!-- ⋅ --></mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">(</mo>
    <mi>b</mi>
    <mo>⋅<!-- ⋅ --></mo>
    <mo stretchy="false">(</mo>
    <mi>b</mi>
    <mo>⋅<!-- ⋅ --></mo>
    <mo stretchy="false">(</mo>
    <mi>b</mi>
  </mrow>
  <mo>⋅<!-- ⋅ --></mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">(</mo>
    <mi>b</mi>
    <mo>⋅<!-- ⋅ --></mo>
    <mi>b</mi>
    <mo stretchy="false">)</mo>
    <mo stretchy="false">)</mo>
    <mo stretchy="false">)</mo>
    <mo stretchy="false">)</mo>
    <mo stretchy="false">)</mo>
    <mo stretchy="false">)</mo>
    <mo>,</mo>
  </mrow>
</math>

we can compute it using three multiplications:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mtable columnalign="left" rowspacing="4pt" columnspacing="1em">
    <mtr>
      <mtd>
        <msup>
          <mi>b</mi>
          <mn>2</mn>
        </msup>
        <mspace width="thinmathspace"/>
        <mo>=</mo>
        <mspace width="thinmathspace"/>
        <mi>b</mi>
        <mo>⋅<!-- ⋅ --></mo>
        <mi>b</mi>
        <mo>,</mo>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <msup>
          <mi>b</mi>
          <mn>4</mn>
        </msup>
        <mspace width="thinmathspace"/>
        <mo>=</mo>
        <mspace width="thinmathspace"/>
        <msup>
          <mi>b</mi>
          <mn>2</mn>
        </msup>
        <mo>⋅<!-- ⋅ --></mo>
        <msup>
          <mi>b</mi>
          <mn>2</mn>
        </msup>
        <mo>,</mo>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <msup>
          <mi>b</mi>
          <mn>8</mn>
        </msup>
        <mspace width="thinmathspace"/>
        <mo>=</mo>
        <mspace width="thinmathspace"/>
        <msup>
          <mi>b</mi>
          <mn>4</mn>
        </msup>
        <mo>⋅<!-- ⋅ --></mo>
        <msup>
          <mi>b</mi>
          <mn>4</mn>
        </msup>
        <mo>.</mo>
      </mtd>
    </mtr>
  </mtable>
</math>

This method works fine for exponents that are powers of 2.  We can also take
advantage of successive squaring in computing exponentials in general if we use
the rule

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mtable columnalign="left left" rowspacing="4pt" columnspacing="1em">
    <mtr>
      <mtd>
        <msup>
          <mi>b</mi>
          <mi>n</mi>
        </msup>
        <mspace width="thinmathspace"/>
        <mo>=</mo>
        <mspace width="thinmathspace"/>
        <mo stretchy="false">(</mo>
        <msup>
          <mi>b</mi>
          <mrow class="MJX-TeXAtom-ORD">
            <mi>n</mi>
            <mrow class="MJX-TeXAtom-ORD">
              <mo>/</mo>
            </mrow>
            <mn>2</mn>
          </mrow>
        </msup>
        <msup>
          <mo stretchy="false">)</mo>
          <mn>2</mn>
        </msup>
      </mtd>
      <mtd>
        <mtext>if</mtext>
        <mspace width="thickmathspace"/>
        <mi>n</mi>
        <mspace width="thickmathspace"/>
        <mtext>is even</mtext>
        <mo>,</mo>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <msup>
          <mi>b</mi>
          <mi>n</mi>
        </msup>
        <mspace width="thinmathspace"/>
        <mo>=</mo>
        <mspace width="thinmathspace"/>
        <mi>b</mi>
        <mo>⋅<!-- ⋅ --></mo>
        <msup>
          <mi>b</mi>
          <mrow class="MJX-TeXAtom-ORD">
            <mi>n</mi>
            <mo>−<!-- − --></mo>
            <mn>1</mn>
          </mrow>
        </msup>
      </mtd>
      <mtd>
        <mtext>if</mtext>
        <mspace width="thickmathspace"/>
        <mi>n</mi>
        <mspace width="thickmathspace"/>
        <mtext>is odd</mtext>
        <mo>.</mo>
      </mtd>
    </mtr>
  </mtable>
</math>

We can express this method as a procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fast-expt b n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> n </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
         </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pln">even? n</span><span class="clo">)</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pln">square </span><span class="opn">(</span><span class="pln">fast-expt b </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> n </span><span class="lit">2</span><span class="clo">))))</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b </span><span class="opn">(</span><span class="pln">fast-expt b </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">))))))</span></pre></div>

<p>where the predicate to test whether an integer is even is defined in terms of
the primitive procedure <code>remainder</code> by
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">even? n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> </span><span class="opn">(</span><span class="pln">remainder n </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="clo">))</span></pre></div>

<p>The process evolved by <code>fast-expt</code> grows logarithmically with <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> in
both space and number of steps.  To see this, observe that computing
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup>
    <mi>b</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mn>2</mn>
      <mi>n</mi>
    </mrow>
  </msup>
</math> using <code>fast-expt</code> requires only one more multiplication
than computing <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup>
    <mi>b</mi>
    <mi>n</mi>
  </msup>
</math>.  The size of the exponent we can compute therefore
doubles (approximately) with every new multiplication we are allowed.  Thus,
the number of multiplications required for an exponent of <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> grows about as
fast as the logarithm of <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> to the base 2.  The process has
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi mathvariant="normal">Θ<!-- Θ --></mi>
    <mo stretchy="false">(</mo>
    <mi>log</mi>
    <mo>⁡<!-- ⁡ --></mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> growth.<a class="footnote_link" id="DOCF37" href="#FOOT37"><sup>37</sup></a>
</p>
<p>The difference between <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi mathvariant="normal">Θ<!-- Θ --></mi>
    <mo stretchy="false">(</mo>
    <mi>log</mi>
    <mo>⁡<!-- ⁡ --></mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> growth and
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi mathvariant="normal">Θ<!-- Θ --></mi>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> growth becomes striking as <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> becomes large.  For
example, <code>fast-expt</code> for <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> = 1000 requires only 14
multiplications.<a class="footnote_link" id="DOCF38" href="#FOOT38"><sup>38</sup></a> It is also possible to
use the idea of successive squaring to devise an iterative algorithm that
computes exponentials with a logarithmic number of steps (see <a href="#Exercise-1_002e16">Exercise 1.16</a>), 
although, as is often the case with iterative algorithms, this is not
written down so straightforwardly as the recursive algorithm.<a class="footnote_link" id="DOCF39" href="#FOOT39"><sup>39</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e16"></a>Exercise 1.16:</strong> Design a procedure that evolves
an iterative exponentiation process that uses successive squaring and uses a
logarithmic number of steps, as does <code>fast-expt</code>.  (Hint: Using the
observation that <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">(</mo>
    <msup>
      <mi>b</mi>
      <mrow class="MJX-TeXAtom-ORD">
        <mi>n</mi>
        <mrow class="MJX-TeXAtom-ORD">
          <mo>/</mo>
        </mrow>
        <mn>2</mn>
      </mrow>
    </msup>
    <msup>
      <mo stretchy="false">)</mo>
      <mn>2</mn>
    </msup>
  </mrow>
  <mo>=</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">(</mo>
    <msup>
      <mi>b</mi>
      <mn>2</mn>
    </msup>
    <msup>
      <mo stretchy="false">)</mo>
      <mrow class="MJX-TeXAtom-ORD">
        <mi>n</mi>
        <mrow class="MJX-TeXAtom-ORD">
          <mo>/</mo>
        </mrow>
        <mn>2</mn>
      </mrow>
    </msup>
  </mrow>
</math>, keep, along with
the exponent <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> and the base <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>b</mi>
</math>, an additional state variable <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math>, and
define the state transformation in such a way that the product <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>a</mi>
    <msup>
      <mi>b</mi>
      <mi>n</mi>
    </msup>
  </mrow>
</math> 
is unchanged from state to state.  At the beginning of the process
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math> is taken to be 1, and the answer is given by the value of <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math> at the
end of the process.  In general, the technique of defining an
<a id="index-invariant-quantity"></a>
<em>invariant quantity</em> that remains unchanged from state to state is a
powerful way to think about the design of iterative algorithms.)
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e17"></a>Exercise 1.17:</strong> The exponentiation algorithms in
this section are based on performing exponentiation by means of repeated
multiplication.  In a similar way, one can perform integer multiplication by
means of repeated addition.  The following multiplication procedure (in which
it is assumed that our language can only add, not multiply) is analogous to the
<code>expt</code> procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> b </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
      </span><span class="lit">0</span><span class="pln">
      </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> b </span><span class="lit">1</span><span class="clo">)))))</span></pre></div>

<p>This algorithm takes a number of steps that is linear in <code>b</code>.  Now suppose
we include, together with addition, operations <code>double</code>, which doubles an
integer, and <code>halve</code>, which divides an (even) integer by 2.  Using these,
design a multiplication procedure analogous to <code>fast-expt</code> that uses a
logarithmic number of steps.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e18"></a>Exercise 1.18:</strong> Using the results of
<a href="#Exercise-1_002e16">Exercise 1.16</a> and <a href="#Exercise-1_002e17">Exercise 1.17</a>, devise a procedure that generates
an iterative process for multiplying two integers in terms of adding, doubling,
and halving and uses a logarithmic number of steps.<a class="footnote_link" id="DOCF40" href="#FOOT40"><sup>40</sup></a>
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e19"></a>Exercise 1.19:</strong> There is a clever algorithm for
computing the Fibonacci numbers in a logarithmic number of steps.  Recall the
transformation of the state variables <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>b</mi>
</math> in the <code>fib-iter</code>
process of <a href="1_002e2_002e2.xhtml#g_t1_002e2_002e2">1.2.2</a>: <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
  <mo stretchy="false">←<!-- ← --></mo>
  <mi>a</mi>
  <mo>+</mo>
  <mi>b</mi>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>b</mi>
  <mo stretchy="false">←<!-- ← --></mo>
  <mi>a</mi>
</math>.
Call this transformation <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>T</mi>
</math>, and observe that applying <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>T</mi>
</math> over and over
again <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> times, starting with 1 and 0, produces the pair <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo>+</mo>
    <mn>1</mn>
    <mo stretchy="false">)</mo>
  </mrow>
</math> and 
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math>.  In other words, the Fibonacci numbers are produced
by applying <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup>
    <mi>T</mi>
    <mi>n</mi>
  </msup>
</math>, the <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup>
    <mi>n</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mtext>th</mtext>
    </mrow>
  </msup>
</math> power of the transformation <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>T</mi>
</math>,
starting with the pair (1, 0).  Now consider <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>T</mi>
</math> to be the special case of
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>p</mi>
    <mo>=</mo>
    <mn>0</mn>
  </mrow>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>q</mi>
    <mo>=</mo>
    <mn>1</mn>
  </mrow>
</math> in a family of transformations <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msub>
    <mi>T</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mi>p</mi>
      <mi>q</mi>
    </mrow>
  </msub>
</math>,
where <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msub>
    <mi>T</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mi>p</mi>
      <mi>q</mi>
    </mrow>
  </msub>
</math> transforms the pair <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">(</mo>
    <mi>a</mi>
    <mo>,</mo>
    <mi>b</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> according to 
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
  <mo stretchy="false">←<!-- ← --></mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mi>b</mi>
    <mi>q</mi>
  </mrow>
  <mo>+</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mi>a</mi>
    <mi>q</mi>
  </mrow>
  <mo>+</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mi>a</mi>
    <mi>p</mi>
  </mrow>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>b</mi>
  <mo stretchy="false">←<!-- ← --></mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mi>b</mi>
    <mi>p</mi>
  </mrow>
  <mo>+</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mi>a</mi>
    <mi>q</mi>
  </mrow>
</math>.
Show that if we apply such a transformation <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msub>
    <mi>T</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mi>p</mi>
      <mi>q</mi>
    </mrow>
  </msub>
</math> twice, the
effect is the same as using a single transformation <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msub>
    <mi>T</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <msup>
        <mi>p</mi>
        <mo>′</mo>
      </msup>
      <msup>
        <mi>q</mi>
        <mo>′</mo>
      </msup>
    </mrow>
  </msub>
</math> of the
same form, and compute <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup>
    <mi>p</mi>
    <mo>′</mo>
  </msup>
  <mspace width="negativethinmathspace"/>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup>
    <mi>q</mi>
    <mo>′</mo>
  </msup>
  <mspace width="negativethinmathspace"/>
</math> in terms of <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>p</mi>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>q</mi>
</math>.  This
gives us an explicit way to square these transformations, and thus we can
compute <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msup>
    <mi>T</mi>
    <mi>n</mi>
  </msup>
</math> using successive squaring, as in the <code>fast-expt</code>
procedure.  Put this all together to complete the following procedure, which
runs in a logarithmic number of steps:<a class="footnote_link" id="DOCF41" href="#FOOT41"><sup>41</sup></a>
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">fib-iter </span><span class="lit">1</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> n</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib-iter a b p q count</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> count </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
         b</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pln">even? count</span><span class="clo">)</span><span class="pln">
         </span><span class="opn">(</span><span class="pln">fib-iter a
                   b
                   ⟨</span><span class="pun">??</span><span class="pln">⟩  </span><span class="com">;compute </span><var><span class="com">p'</span></var><span class="pln">
                   ⟨</span><span class="pun">??</span><span class="pln">⟩  </span><span class="com">;compute </span><var><span class="com">q'</span></var><span class="pln">
                   </span><span class="opn">(</span><span class="pun">/</span><span class="pln"> count </span><span class="lit">2</span><span class="clo">)))</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pln">fib-iter </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b q</span><span class="clo">)</span><span class="pln"> 
                      </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a q</span><span class="clo">)</span><span class="pln"> 
                      </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a p</span><span class="clo">))</span><span class="pln">
                   </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> b p</span><span class="clo">)</span><span class="pln"> 
                      </span><span class="opn">(</span><span class="pun">*</span><span class="pln"> a q</span><span class="clo">))</span><span class="pln">
                   p
                   q
                   </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> count </span><span class="lit">1</span><span class="clo">)))))</span></pre></div>
</blockquote>

<div class="footnote">
<hr />

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT37"><p><a class="footnote_backlink" href="#DOCF37"><sup>37</sup></a>
More precisely, the number of
multiplications required is equal to 1 less than the log base 2 of <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> plus
the number of ones in the binary representation of <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math>.  This total is always
less than twice the log base 2 of <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math>.  The arbitrary constants <math xmlns="http://www.w3.org/1998/Math/MathML">
  <msub>
    <mi>k</mi>
    <mn>1</mn>
  </msub>
</math> and
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <msub>
    <mi>k</mi>
    <mn>2</mn>
  </msub>
</math> in the definition of order notation imply that, for a logarithmic
process, the base to which logarithms are taken does not matter, so all such
processes are described as <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi mathvariant="normal">Θ<!-- Θ --></mi>
    <mo stretchy="false">(</mo>
    <mi>log</mi>
    <mo>⁡<!-- ⁡ --></mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math>.</p>
</div>
<div id="FOOT38"><p><a class="footnote_backlink" href="#DOCF38"><sup>38</sup></a>
You may wonder why anyone would care about raising
numbers to the 1000th power.  See <a href="1_002e2_002e6.xhtml#g_t1_002e2_002e6">1.2.6</a>.</p>
</div>
<div id="FOOT39"><p><a class="footnote_backlink" href="#DOCF39"><sup>39</sup></a>
This
iterative algorithm is ancient.  It appears in the <cite>Chandah-sutra</cite> by
Áchárya Pingala, written before 200 <abbr>B.C.</abbr> See <a href="References.xhtml#Knuth-1981">Knuth 1981</a>, section
4.6.3, for a full discussion and analysis of this and other methods of
exponentiation.</p>
</div>
<div id="FOOT40"><p><a class="footnote_backlink" href="#DOCF40"><sup>40</sup></a>
This algorithm,
which is sometimes known as the “Russian peasant method” of multiplication,
is ancient.  Examples of its use are found in the Rhind Papyrus, one of the two
oldest mathematical documents in existence, written about 1700 <abbr>B.C.</abbr>
(and copied from an even older document) by an Egyptian scribe named A’h-mose.</p>
</div>
<div id="FOOT41"><p><a class="footnote_backlink" href="#DOCF41"><sup>41</sup></a>
This exercise was suggested to
us by Joe Stoy, based on an example in <a href="References.xhtml#Kaldewaij-1990">Kaldewaij 1990</a>.</p>
</div>
</div>
<hr />
<nav class="header">
<p>
Next: <a href="1_002e2_002e5.xhtml#g_t1_002e2_002e5" accesskey="n" rel="next">1.2.5</a>, Previous: <a href="1_002e2_002e3.xhtml#g_t1_002e2_002e3" accesskey="p" rel="prev">1.2.3</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>