<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Structure and Interpretation of Computer Programs, 2e: 5.4.3</title>

<meta name="description" content="Structure and Interpretation of Computer Programs, 2e: 5.4.3" />
<meta name="keywords" content="Structure and Interpretation of Computer Programs, 2e: 5.4.3" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="Generator" content="texi2any" />
<meta charset="utf-8" />
<link href="index.xhtml#Top" rel="start" title="Top" />
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index" />
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents" />
<link href="5_002e4.xhtml#g_t5_002e4" rel="prev" title="5.4" />
<link href="5_002e4_002e4.xhtml#g_t5_002e4_002e4" rel="next" title="5.4.4" />
<link href="5_002e4_002e2.xhtml#g_t5_002e4_002e2" rel="prev" title="5.4.2" />

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script src="js/jquery.min.js" type="text/javascript"></script>
<script src="js/footnotes.js" type="text/javascript"></script>
<script src="js/browsertest.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t5_002e4_002e3"></a>
<nav class="header">
<p>
Next: <a href="5_002e4_002e4.xhtml#g_t5_002e4_002e4" accesskey="n" rel="next">5.4.4</a>, Previous: <a href="5_002e4_002e2.xhtml#g_t5_002e4_002e2" accesskey="p" rel="prev">5.4.2</a>, Up: <a href="5_002e4.xhtml#g_t5_002e4" accesskey="u" rel="prev">5.4</a> Â  [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr />

<a id="Conditionals_002c-Assignments_002c-and-Definitions"></a>
<h4 class="subsection"><span class="secnum">5.4.3</span><span class="sectitle">Conditionals, Assignments, and Definitions</span></h4>

<p>As with the metacircular evaluator, special forms are handled by selectively
evaluating fragments of the expression.  For an <code>if</code> expression, we must
evaluate the predicate and decide, based on the value of predicate, whether to
evaluate the consequent or the alternative.
</p>
<p>Before evaluating the predicate, we save the <code>if</code> expression itself so
that we can later extract the consequent or alternative.  We also save the
environment, which we will need later in order to evaluate the consequent or
the alternative, and we save <code>continue</code>, which we will need later in order
to return to the evaluation of the expression that is waiting for the value of
the <code>if</code>.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="pln">ev-if
  </span><span class="opn">(</span><span class="pln">save exp</span><span class="clo">)</span><span class="pln">   </span><span class="roman"><span class="com">; save expression for later</span></span><span class="pln">
  </span><span class="opn">(</span><span class="pln">save env</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">save continue</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">assign continue </span><span class="opn">(</span><span class="pln">label ev-if-decide</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">assign exp </span><span class="opn">(</span><span class="pln">op if-predicate</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">reg exp</span><span class="clo">))</span><span class="pln">
  </span><span class="roman"><span class="com">; evaluate the predicate:</span></span><span class="pln">
  </span><span class="opn">(</span><span class="pln">goto </span><span class="opn">(</span><span class="pln">label eval-dispatch</span><span class="clo">))</span><span class="pln">  </span></pre></div>

<p>When we return from evaluating the predicate, we test whether it was true or
false and, depending on the result, place either the consequent or the
alternative in <code>exp</code> before going to <code>eval-dispatch</code>.  Notice that
restoring <code>env</code> and <code>continue</code> here sets up <code>eval-dispatch</code> to
have the correct environment and to continue at the right place to receive the
value of the <code>if</code> expression.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="pln">ev-if-decide
  </span><span class="opn">(</span><span class="pln">restore continue</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">restore env</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">restore exp</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">test </span><span class="opn">(</span><span class="pln">op true?</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">reg val</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">branch </span><span class="opn">(</span><span class="pln">label ev-if-consequent</span><span class="clo">))</span><span class="pln">
ev-if-alternative
  </span><span class="opn">(</span><span class="pln">assign exp </span><span class="opn">(</span><span class="pln">op if-alternative</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">reg exp</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">goto </span><span class="opn">(</span><span class="pln">label eval-dispatch</span><span class="clo">))</span><span class="pln">
ev-if-consequent
  </span><span class="opn">(</span><span class="pln">assign exp </span><span class="opn">(</span><span class="pln">op if-consequent</span><span class="clo">)</span><span class="pln"> </span><span class="opn">(</span><span class="pln">reg exp</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">goto </span><span class="opn">(</span><span class="pln">label eval-dispatch</span><span class="clo">))</span></pre></div>

<a id="Assignments-and-definitions-1"></a>
<h5 class="subsubheading">Assignments and definitions</h5>

<p>Assignments are handled by <code>ev-assignment</code>, which is reached from
<code>eval-dispatch</code> with the assignment expression in <code>exp</code>.  The code at
<code>ev-assignment</code> first evaluates the value part of the expression and then
installs the new value in the environment.  <code>Set-variable-value!</code> is
assumed to be available as a machine operation.
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="pln">ev-assignment
  </span><span class="opn">(</span><span class="pln">assign unev 
          </span><span class="opn">(</span><span class="pln">op assignment-variable</span><span class="clo">)</span><span class="pln">
          </span><span class="opn">(</span><span class="pln">reg exp</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">save unev</span><span class="clo">)</span><span class="pln">   </span><span class="roman"><span class="com">; save variable for later</span></span><span class="pln">
  </span><span class="opn">(</span><span class="pln">assign exp
          </span><span class="opn">(</span><span class="pln">op assignment-value</span><span class="clo">)</span><span class="pln">
          </span><span class="opn">(</span><span class="pln">reg exp</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">save env</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">save continue</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">assign continue
          </span><span class="opn">(</span><span class="pln">label ev-assignment-1</span><span class="clo">))</span><span class="pln">
  </span><span class="roman"><span class="com">; evaluate the assignment value:</span></span><span class="pln">
  </span><span class="opn">(</span><span class="pln">goto </span><span class="opn">(</span><span class="pln">label eval-dispatch</span><span class="clo">))</span><span class="pln">  
ev-assignment-1
  </span><span class="opn">(</span><span class="pln">restore continue</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">restore env</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">restore unev</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">perform </span><span class="opn">(</span><span class="pln">op set-variable-value!</span><span class="clo">)</span><span class="pln">
           </span><span class="opn">(</span><span class="pln">reg unev</span><span class="clo">)</span><span class="pln">
           </span><span class="opn">(</span><span class="pln">reg val</span><span class="clo">)</span><span class="pln">
           </span><span class="opn">(</span><span class="pln">reg env</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">assign val
          </span><span class="opn">(</span><span class="pln">const ok</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">goto </span><span class="opn">(</span><span class="pln">reg continue</span><span class="clo">))</span></pre></div>

<p>Definitions are handled in a similar way:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="pln">ev-definition
  </span><span class="opn">(</span><span class="pln">assign unev 
          </span><span class="opn">(</span><span class="pln">op definition-variable</span><span class="clo">)</span><span class="pln">
          </span><span class="opn">(</span><span class="pln">reg exp</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">save unev</span><span class="clo">)</span><span class="pln">   </span><span class="roman"><span class="com">; save variable for later</span></span><span class="pln">
  </span><span class="opn">(</span><span class="pln">assign exp 
          </span><span class="opn">(</span><span class="pln">op definition-value</span><span class="clo">)</span><span class="pln">
          </span><span class="opn">(</span><span class="pln">reg exp</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">save env</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">save continue</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">assign continue </span><span class="opn">(</span><span class="pln">label ev-definition-1</span><span class="clo">))</span><span class="pln">
  </span><span class="roman"><span class="com">; evaluate the definition value:</span></span><span class="pln">
  </span><span class="opn">(</span><span class="pln">goto </span><span class="opn">(</span><span class="pln">label eval-dispatch</span><span class="clo">))</span><span class="pln">  
ev-definition-1
  </span><span class="opn">(</span><span class="pln">restore continue</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">restore env</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">restore unev</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">perform </span><span class="opn">(</span><span class="pln">op define-variable!</span><span class="clo">)</span><span class="pln">
           </span><span class="opn">(</span><span class="pln">reg unev</span><span class="clo">)</span><span class="pln">
           </span><span class="opn">(</span><span class="pln">reg val</span><span class="clo">)</span><span class="pln">
           </span><span class="opn">(</span><span class="pln">reg env</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">assign val </span><span class="opn">(</span><span class="pln">const ok</span><span class="clo">))</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">goto </span><span class="opn">(</span><span class="pln">reg continue</span><span class="clo">))</span></pre></div>

<blockquote>
<p><strong><a id="Exercise-5_002e23"></a>Exercise 5.23:</strong> Extend the evaluator to handle
derived expressions such as <code>cond</code>, <code>let</code>, and so on 
(<a href="4_002e1_002e2.xhtml#g_t4_002e1_002e2">4.1.2</a>).  You may âcheatâ and assume that the syntax transformers such
as <code>cond-&gt;if</code> are available as machine operations.<a class="footnote_link" id="DOCF313" href="#FOOT313"><sup>313</sup></a>
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e24"></a>Exercise 5.24:</strong> Implement <code>cond</code> as a new
basic special form without reducing it to <code>if</code>.  You will have to
construct a loop that tests the predicates of successive <code>cond</code> clauses
until you find one that is true, and then use <code>ev-sequence</code> to evaluate
the actions of the clause.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-5_002e25"></a>Exercise 5.25:</strong> Modify the evaluator so that it
uses normal-order evaluation, based on the lazy evaluator of <a href="4_002e2.xhtml#g_t4_002e2">4.2</a>.
</p></blockquote>

<div class="footnote">
<hr />

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT313"><p><a class="footnote_backlink" href="#DOCF313"><sup>313</sup></a>
This isnât
really cheating.  In an actual implementation built from scratch, we would use
our explicit-control evaluator to interpret a Scheme program that performs
source-level transformations like <code>cond-&gt;if</code> in a syntax phase that runs
before execution.</p>
</div>
</div>
<hr />
<nav class="header">
<p>
Next: <a href="5_002e4_002e4.xhtml#g_t5_002e4_002e4" accesskey="n" rel="next">5.4.4</a>, Previous: <a href="5_002e4_002e2.xhtml#g_t5_002e4_002e2" accesskey="p" rel="prev">5.4.2</a>, Up: <a href="5_002e4.xhtml#g_t5_002e4" accesskey="u" rel="prev">5.4</a> Â  [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>