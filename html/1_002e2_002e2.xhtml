<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<!-- Created by GNU Texinfo 5.1, http://www.gnu.org/software/texinfo/ -->
<head>
<title>Structure and Interpretation of Computer Programs, 2e: 1.2.2</title>

<meta name="description" content="Structure and Interpretation of Computer Programs, 2e: 1.2.2" />
<meta name="keywords" content="Structure and Interpretation of Computer Programs, 2e: 1.2.2" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="Generator" content="texi2any" />
<meta charset="utf-8" />
<link href="index.xhtml#Top" rel="start" title="Top" />
<link href="Term-Index.xhtml#Term-Index" rel="index" title="Term Index" />
<link href="index.xhtml#SEC_Contents" rel="contents" title="Table of Contents" />
<link href="1_002e2.xhtml#g_t1_002e2" rel="prev" title="1.2" />
<link href="1_002e2_002e3.xhtml#g_t1_002e2_002e3" rel="next" title="1.2.3" />
<link href="1_002e2_002e1.xhtml#g_t1_002e2_002e1" rel="prev" title="1.2.1" />

<link href="css/style.css" rel="stylesheet" type="text/css" />
<link href="css/prettify.css" rel="stylesheet" type="text/css" />

<script src="js/jquery.min.js" type="text/javascript"></script>
<script src="js/footnotes.js" type="text/javascript"></script>
<script src="js/browsertest.js" type="text/javascript"></script>
</head>

<body>
<section><a id="g_t1_002e2_002e2"></a>
<nav class="header">
<p>
Next: <a href="1_002e2_002e3.xhtml#g_t1_002e2_002e3" accesskey="n" rel="next">1.2.3</a>, Previous: <a href="1_002e2_002e1.xhtml#g_t1_002e2_002e1" accesskey="p" rel="prev">1.2.1</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>
<hr />

<a id="Tree-Recursion"></a>
<h4 class="subsection"><span class="secnum">1.2.2</span><span class="sectitle">Tree Recursion</span></h4>

<p>Another common pattern of computation is called <a id="index-tree-recursion"></a>
<em>tree recursion</em>.  As
an example, consider computing the sequence of Fibonacci numbers, in which each
number is the sum of the preceding two:
</p>
<div style="text-align: center">0, 1, 1, 2, 3, 5, 8, 13, 21, ….
</div>
<p>In general, the Fibonacci numbers can be defined by the rule

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mtext>Fib</mtext>
  <mo stretchy="false">(</mo>
  <mi>n</mi>
  <mo stretchy="false">)</mo>
  <mspace width="thickmathspace"/>
  <mo>=</mo>
  <mspace width="thickmathspace"/>
  <mrow>
    <mo>{</mo>
    <mtable columnalign="left left" rowspacing="4pt" columnspacing="1em">
      <mtr>
        <mtd>
          <mn>0</mn>
        </mtd>
        <mtd>
          <mspace width="thickmathspace"/>
          <mtext>if</mtext>
          <mspace width="thickmathspace"/>
          <mspace width="thickmathspace"/>
          <mi>n</mi>
          <mo>=</mo>
          <mn>0</mn>
          <mo>,</mo>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mn>1</mn>
        </mtd>
        <mtd>
          <mspace width="thickmathspace"/>
          <mtext>if</mtext>
          <mspace width="thickmathspace"/>
          <mspace width="thickmathspace"/>
          <mi>n</mi>
          <mo>=</mo>
          <mn>1</mn>
          <mo>,</mo>
        </mtd>
      </mtr>
      <mtr>
        <mtd>
          <mtext>Fib</mtext>
          <mo stretchy="false">(</mo>
          <mi>n</mi>
          <mo>−<!-- − --></mo>
          <mn>1</mn>
          <mo stretchy="false">)</mo>
          <mo>+</mo>
          <mtext>Fib</mtext>
          <mo stretchy="false">(</mo>
          <mi>n</mi>
          <mo>−<!-- − --></mo>
          <mn>2</mn>
          <mo stretchy="false">)</mo>
        </mtd>
        <mtd>
          <mspace width="thickmathspace"/>
          <mtext>otherwise</mtext>
          <mo>.</mo>
        </mtd>
      </mtr>
    </mtable>
  </mrow>
</math>

We can immediately translate this definition into a recursive procedure for
computing Fibonacci numbers:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib n</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> n </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">1</span><span class="clo">))</span><span class="pln">
                 </span><span class="opn">(</span><span class="pln">fib </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> n </span><span class="lit">2</span><span class="clo">))))))</span></pre></div>

<p>Consider the pattern of this computation.  To compute <code>(fib 5)</code>, we
compute <code>(fib 4)</code> and <code>(fib 3)</code>.  To compute <code>(fib 4)</code>, we
compute <code>(fib 3)</code> and <code>(fib 2)</code>.  In general, the evolved process
looks like a tree, as shown in <a href="#Figure-1_002e5">Figure 1.5</a>.  Notice that the branches
split into two at each level (except at the bottom); this reflects the fact
that the <code>fib</code> procedure calls itself twice each time it is invoked.
</p>
<figure class="float">
<a id="Figure-1_002e5"></a>
<object style="width: 58.07ex; height: 36.18ex;" data="fig/chap1/Fig1.5d.std.svg" type="image/svg+xml">SVG</object>

<figcaption class="float-caption">
<p><strong>Figure 1.5:</strong> The tree-recursive process generated in computing <code>(fib 5)</code>.</p>
</figcaption>
</figure>

<p>This procedure is instructive as a prototypical tree recursion, but it is a
terrible way to compute Fibonacci numbers because it does so much redundant
computation.  Notice in <a href="#Figure-1_002e5">Figure 1.5</a> that the entire computation of
<code>(fib 3)</code>—almost half the work—is duplicated.  In fact, it is not hard
to show that the number of times the procedure will compute <code>(fib 1)</code> or
<code>(fib 0)</code> (the number of leaves in the above tree, in general) is
precisely <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo>+</mo>
    <mn>1</mn>
    <mo stretchy="false">)</mo>
  </mrow>
</math>.  To get an idea of how bad this is, one can
show that the value of <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> grows exponentially with <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math>.  More
precisely (see <a href="#Exercise-1_002e13">Exercise 1.13</a>), <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> is the closest integer
to <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <msup>
      <mi>φ<!-- φ --></mi>
      <mi>n</mi>
    </msup>
    <mrow class="MJX-TeXAtom-ORD">
      <mo>/</mo>
    </mrow>
    <msqrt>
      <mn>5</mn>
    </msqrt>
  </mrow>
</math>, where

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mi>φ<!-- φ --></mi>
  <mspace width="thinmathspace"/>
  <mo>=</mo>
  <mspace width="thinmathspace"/>
  <mfrac>
    <mrow>
      <mn>1</mn>
      <mo>+</mo>
      <msqrt>
        <mn>5</mn>
      </msqrt>
    </mrow>
    <mn>2</mn>
  </mfrac>
  <mspace width="thinmathspace"/>
  <mo>≈<!-- ≈ --></mo>
  <mspace width="thinmathspace"/>
  <mn>1.6180</mn>
</math>

is the <a id="index-golden-ratio"></a>
<em>golden ratio</em>, which satisfies the equation

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <msup>
    <mi>φ<!-- φ --></mi>
    <mn>2</mn>
  </msup>
  <mspace width="thinmathspace"/>
  <mo>=</mo>
  <mspace width="thinmathspace"/>
  <mrow class="MJX-TeXAtom-ORD">
    <mi>φ<!-- φ --></mi>
    <mo>+</mo>
    <mn>1.</mn>
  </mrow>
</math>

Thus, the process uses a number of steps that grows exponentially with the
input.  On the other hand, the space required grows only linearly with the
input, because we need keep track only of which nodes are above us in the tree
at any point in the computation.  In general, the number of steps required by a
tree-recursive process will be proportional to the number of nodes in the tree,
while the space required will be proportional to the maximum depth of the tree.
</p>
<p>We can also formulate an iterative process for computing the Fibonacci numbers.
The idea is to use a pair of integers <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>b</mi>
</math>, initialized to
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib(1) = 1</mtext>
  </mrow>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib(0) = 0</mtext>
  </mrow>
</math>, and to repeatedly apply the
simultaneous transformations
</p>

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <mtable columnalign="left" rowspacing="4pt" columnspacing="1em">
    <mtr>
      <mtd>
        <mi>a</mi>
        <mspace width="thickmathspace"/>
        <mo stretchy="false">←<!-- ← --></mo>
        <mspace width="thickmathspace"/>
        <mi>a</mi>
        <mo>+</mo>
        <mi>b</mi>
        <mo>,</mo>
      </mtd>
    </mtr>
    <mtr>
      <mtd>
        <mi>b</mi>
        <mspace width="thickmathspace"/>
        <mo stretchy="false">←<!-- ← --></mo>
        <mspace width="thickmathspace"/>
        <mi>a</mi>
        <mo>.</mo>
      </mtd>
    </mtr>
  </mtable>
</math>

<p>It is not hard to show that, after applying this transformation <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> times,
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>b</mi>
</math> will be equal, respectively, to <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo>+</mo>
    <mn>1</mn>
    <mo stretchy="false">)</mo>
  </mrow>
</math> and
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math>.  Thus, we can compute Fibonacci numbers iteratively using
the procedure
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib n</span><span class="clo">)</span><span class="pln"> 
  </span><span class="opn">(</span><span class="pln">fib-iter </span><span class="lit">1</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> n</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">fib-iter a b count</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">if</span><span class="pln"> </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> count </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
      b
      </span><span class="opn">(</span><span class="pln">fib-iter </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> a b</span><span class="clo">)</span><span class="pln"> a </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> count </span><span class="lit">1</span><span class="clo">))))</span></pre></div>

<p>This second method for computing <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> is a linear iteration.  The
difference in number of steps required by the two methods—one linear in
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math>, one growing as fast as <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> itself—is enormous, even for
small inputs.
</p>
<p>One should not conclude from this that tree-recursive processes are useless.
When we consider processes that operate on hierarchically structured data
rather than numbers, we will find that tree recursion is a natural and powerful
tool.<a class="footnote_link" id="DOCF32" href="#FOOT32"><sup>32</sup></a> But
even in numerical operations, tree-recursive processes can be useful in helping
us to understand and design programs.  For instance, although the first
<code>fib</code> procedure is much less efficient than the second one, it is more
straightforward, being little more than a translation into Lisp of the
definition of the Fibonacci sequence.  To formulate the iterative algorithm
required noticing that the computation could be recast as an iteration with
three state variables.
</p>
<a id="Example_003a-Counting-change"></a>
<h5 class="subsubheading">Example: Counting change</h5>

<p>It takes only a bit of cleverness to come up with the iterative Fibonacci
algorithm.  In contrast, consider the following problem: How many different
ways can we make change of $1.00, given half-dollars, quarters, dimes,
nickels, and pennies?  More generally, can we write a procedure to compute the
number of ways to change any given amount of money?
</p>
<p>This problem has a simple solution as a recursive procedure.  Suppose we think
of the types of coins available as arranged in some order.  Then the following
relation holds:
</p>
<p>The number of ways to change amount <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math> using <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> kinds of coins equals
</p>
<ul>
<li> the number of ways to change amount <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math> using all but the first kind of coin,
plus

</li><li> the number of ways to change amount <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>a</mi>
    <mo>−<!-- − --></mo>
    <mi>d</mi>
  </mrow>
</math> using all <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> kinds of
coins, where <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>d</mi>
</math> is the denomination of the first kind of coin.

</li></ul>

<p>To see why this is true, observe that the ways to make change can be divided
into two groups: those that do not use any of the first kind of coin, and those
that do.  Therefore, the total number of ways to make change for some amount is
equal to the number of ways to make change for the amount without using any of
the first kind of coin, plus the number of ways to make change assuming that we
do use the first kind of coin.  But the latter number is equal to the number of
ways to make change for the amount that remains after using a coin of the first
kind.
</p>
<p>Thus, we can recursively reduce the problem of changing a given amount to the
problem of changing smaller amounts using fewer kinds of coins.  Consider this
reduction rule carefully, and convince yourself that we can use it to describe
an algorithm if we specify the following degenerate cases:<a class="footnote_link" id="DOCF33" href="#FOOT33"><sup>33</sup></a>
</p>
<ul>
<li> If <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math> is exactly 0, we should count that as 1 way to make change.

</li><li> If <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>a</mi>
</math> is less than 0, we should count that as 0 ways to make change.

</li><li> If <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>n</mi>
</math> is 0, we should count that as 0 ways to make change.

</li></ul>

<p>We can easily translate this description into a recursive procedure:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">count-change amount</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="pln">cc amount </span><span class="lit">5</span><span class="clo">))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cc amount kinds-of-coins</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> amount </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="kwd">or</span><span class="pln"> </span><span class="opn">(</span><span class="pun">&lt;</span><span class="pln"> amount </span><span class="lit">0</span><span class="clo">)</span><span class="pln"> 
             </span><span class="opn">(</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">0</span><span class="clo">))</span><span class="pln"> 
         </span><span class="lit">0</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">(</span><span class="kwd">else</span><span class="pln"> 
         </span><span class="opn">(</span><span class="pun">+</span><span class="pln"> </span><span class="opn">(</span><span class="pln">cc amount </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> kinds-of-coins </span><span class="lit">1</span><span class="clo">))</span><span class="pln">
            </span><span class="opn">(</span><span class="pln">cc </span><span class="opn">(</span><span class="pun">-</span><span class="pln"> amount </span><span class="opn">(</span><span class="pln">first-denomination 
                           kinds-of-coins</span><span class="clo">))</span><span class="pln">
                kinds-of-coins</span><span class="clo">)))))</span><span class="pln">

</span><span class="opn">(</span><span class="kwd">define</span><span class="pln"> </span><span class="opn">(</span><span class="pln">first-denomination kinds-of-coins</span><span class="clo">)</span><span class="pln">
  </span><span class="opn">(</span><span class="kwd">cond</span><span class="pln"> </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">1</span><span class="clo">)</span><span class="pln"> </span><span class="lit">1</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">2</span><span class="clo">)</span><span class="pln"> </span><span class="lit">5</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">3</span><span class="clo">)</span><span class="pln"> </span><span class="lit">10</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">4</span><span class="clo">)</span><span class="pln"> </span><span class="lit">25</span><span class="clo">)</span><span class="pln">
        </span><span class="opn">((</span><span class="pun">=</span><span class="pln"> kinds-of-coins </span><span class="lit">5</span><span class="clo">)</span><span class="pln"> </span><span class="lit">50</span><span class="clo">)))</span></pre></div>

<p>(The <code>first-denomination</code> procedure takes as input the number of kinds of
coins available and returns the denomination of the first kind.  Here we are
thinking of the coins as arranged in order from largest to smallest, but any
order would do as well.)  We can now answer our original question about
changing a dollar:
</p>
<div class="lisp">
<pre class="lisp prettyprinted" style=""><span class="opn">(</span><span class="pln">count-change </span><span class="lit">100</span><span class="clo">)</span><span class="pln">
</span><i><span class="lit">292</span></i>
</pre></div>

<p><code>Count-change</code> generates a tree-recursive process with redundancies
similar to those in our first implementation of <code>fib</code>.  (It will take
quite a while for that 292 to be computed.)  On the other hand, it is not
obvious how to design a better algorithm for computing the result, and we leave
this problem as a challenge.  The observation that a tree-recursive process may
be highly inefficient but often easy to specify and understand has led people
to propose that one could get the best of both worlds by designing a “smart
compiler” that could transform tree-recursive procedures into more efficient
procedures that compute the same result.<a class="footnote_link" id="DOCF34" href="#FOOT34"><sup>34</sup></a>
</p>
<blockquote>
<p><strong><a id="Exercise-1_002e11"></a>Exercise 1.11:</strong> A function <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>f</mi>
</math> is defined by
the rule that <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>f</mi>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
    <mo>=</mo>
    <mi>n</mi>
  </mrow>
</math> if <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>n</mi>
    <mo>&lt;</mo>
    <mn>3</mn>
  </mrow>
</math> and <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>f</mi>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
  <mo>=</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mi>f</mi>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo>−<!-- − --></mo>
    <mn>1</mn>
    <mo stretchy="false">)</mo>
  </mrow>
  <mo>+</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mn>2</mn>
    <mi>f</mi>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo>−<!-- − --></mo>
    <mn>2</mn>
    <mo stretchy="false">)</mo>
  </mrow>
  <mo>+</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mn>3</mn>
    <mi>f</mi>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo>−<!-- − --></mo>
    <mn>3</mn>
    <mo stretchy="false">)</mo>
  </mrow>
</math> if <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mi>n</mi>
    <mo>≥<!-- ≥ --></mo>
    <mn>3</mn>
  </mrow>
</math>.  
Write a procedure that computes <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>f</mi>
</math> by means of a recursive process.  Write a procedure that
computes <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>f</mi>
</math> by means of an iterative process.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e12"></a>Exercise 1.12:</strong> The following pattern of numbers
is called <a id="index-Pascal_0027s-triangle"></a>
<em>Pascal’s triangle</em>.
</p>
<div class="example">
<pre class="example">
         1
       1   1
     1   2   1
   1   3   3   1
 1   4   6   4   1
       . . .
</pre></div>

<p>The numbers at the edge of the triangle are all 1, and each number inside the
triangle is the sum of the two numbers above it.<a class="footnote_link" id="DOCF35" href="#FOOT35"><sup>35</sup></a> Write a procedure that computes elements of Pascal’s triangle by
means of a recursive process.
</p></blockquote>

<blockquote>
<p><strong><a id="Exercise-1_002e13"></a>Exercise 1.13:</strong> Prove that <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
</math> is
the closest integer to <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <msup>
      <mi>φ<!-- φ --></mi>
      <mi>n</mi>
    </msup>
    <mrow class="MJX-TeXAtom-ORD">
      <mo>/</mo>
    </mrow>
    <msqrt>
      <mn>5</mn>
    </msqrt>
  </mrow>
</math>, where <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>φ<!-- φ --></mi>
  <mo>=</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">(</mo>
    <mn>1</mn>
    <mo>+</mo>
    <msqrt>
      <mn>5</mn>
    </msqrt>
    <mo stretchy="false">)</mo>
    <mrow class="MJX-TeXAtom-ORD">
      <mo>/</mo>
    </mrow>
    <mn>2</mn>
  </mrow>
</math>.  
Hint: Let <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mi>ψ<!-- ψ --></mi>
  <mo>=</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">(</mo>
    <mn>1</mn>
    <mo>−<!-- − --></mo>
    <msqrt>
      <mn>5</mn>
    </msqrt>
    <mo stretchy="false">)</mo>
    <mrow class="MJX-TeXAtom-ORD">
      <mo>/</mo>
    </mrow>
    <mn>2</mn>
  </mrow>
</math>.
Use induction and the definition of the Fibonacci numbers (see <a href="#g_t1_002e2_002e2">1.2.2</a>) 
to prove that <math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mtext>Fib</mtext>
    <mo stretchy="false">(</mo>
    <mi>n</mi>
    <mo stretchy="false">)</mo>
  </mrow>
  <mo>=</mo>
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">(</mo>
    <msup>
      <mi>φ<!-- φ --></mi>
      <mi>n</mi>
    </msup>
    <mo>−<!-- − --></mo>
    <msup>
      <mi>ψ<!-- ψ --></mi>
      <mi>n</mi>
    </msup>
    <mo stretchy="false">)</mo>
    <mrow class="MJX-TeXAtom-ORD">
      <mo>/</mo>
    </mrow>
    <msqrt>
      <mn>5</mn>
    </msqrt>
  </mrow>
</math>.
</p></blockquote>

<div class="footnote">
<hr />

<h4 class="footnotes-heading">Footnotes</h4>

<div id="FOOT32"><p><a class="footnote_backlink" href="#DOCF32"><sup>32</sup></a>
An example of this was hinted at in <a href="1_002e1_002e3.xhtml#g_t1_002e1_002e3">1.1.3</a>. The
interpreter itself evaluates expressions using a tree-recursive process.</p>
</div>
<div id="FOOT33"><p><a class="footnote_backlink" href="#DOCF33"><sup>33</sup></a>
For
example, work through in detail how the reduction rule applies to the problem
of making change for 10 cents using pennies and nickels.</p>
</div>
<div id="FOOT34"><p><a class="footnote_backlink" href="#DOCF34"><sup>34</sup></a>
One approach to coping with
redundant computations is to arrange matters so that we automatically construct
a table of values as they are computed.  Each time we are asked to apply the
procedure to some argument, we first look to see if the value is already stored
in the table, in which case we avoid performing the redundant computation.
This strategy, known as <a id="index-tabulation"></a>
<em>tabulation</em> or <a id="index-memoization"></a>
<em>memoization</em>, can be
implemented in a straightforward way.  Tabulation can sometimes be used to
transform processes that require an exponential number of steps (such as
<code>count-change</code>) into processes whose space and time requirements grow
linearly with the input.  See <a href="3_002e3_002e3.xhtml#Exercise-3_002e27">Exercise 3.27</a>.</p>
</div>
<div id="FOOT35"><p><a class="footnote_backlink" href="#DOCF35"><sup>35</sup></a>
The elements of
Pascal’s triangle are called the <a id="index-binomial-coefficients"></a>
<em>binomial coefficients</em>, because the
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <msup>
      <mi>n</mi>
      <mrow class="MJX-TeXAtom-ORD">
        <mtext>th</mtext>
      </mrow>
    </msup>
  </mrow>
</math> row consists of the coefficients of the terms in the expansion of
<math xmlns="http://www.w3.org/1998/Math/MathML">
  <mrow class="MJX-TeXAtom-ORD">
    <mo stretchy="false">(</mo>
    <mi>x</mi>
    <mo>+</mo>
    <mi>y</mi>
    <msup>
      <mo stretchy="false">)</mo>
      <mi>n</mi>
    </msup>
  </mrow>
</math>.  This pattern for computing the coefficients appeared in
Blaise Pascal’s 1653 seminal work on probability theory, <cite>Traité du
triangle arithmétique</cite>.  According to <a href="References.xhtml#Knuth-_00281973_0029">Knuth (1973)</a>, the same pattern appears
in the <cite>Szu-yuen Yü-chien</cite> (“The Precious Mirror of the Four
Elements”), published by the Chinese mathematician Chu Shih-chieh in 1303, in
the works of the twelfth-century Persian poet and mathematician Omar Khayyam,
and in the works of the twelfth-century Hindu mathematician Bháscara
Áchárya.</p>
</div>
</div>
<hr />
<nav class="header">
<p>
Next: <a href="1_002e2_002e3.xhtml#g_t1_002e2_002e3" accesskey="n" rel="next">1.2.3</a>, Previous: <a href="1_002e2_002e1.xhtml#g_t1_002e2_002e1" accesskey="p" rel="prev">1.2.1</a>, Up: <a href="1_002e2.xhtml#g_t1_002e2" accesskey="u" rel="prev">1.2</a>   [<a href="index.xhtml#SEC_Contents" title="Table of contents" accesskey="c" rel="contents">Contents</a>][<a href="Term-Index.xhtml#Term-Index" title="Index" accesskey="i" rel="index">Index</a>]</p>
</nav>


</section>
</body>
</html>